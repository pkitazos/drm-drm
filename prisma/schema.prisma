// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider      = "zod-prisma"
    output        = "../node_modules/@prisma/schemas"
    modelSuffix   = "Model"
    useDecimalJs  = true
    relationModel = false
    imports       = "./helpers"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum OrderStatus {
    Placed
    Dispatched
    Delivering
    Delivered
    Completed
    Cancelled
}

enum Pickup {
    ElectroAcoustic
    SS
    SSS
    HH
    HHH
    HS
    HSS
    HSH
    P90
    S
    H
}

enum Colour {
    Red
    Orange
    Yellow
    Green
    Blue
    Purple
    Pink
    Brown
    Gold
    Silver
    Grey
    Black
    White
    Natural
    Multicolour
}

enum Shape {
    SStyle
    TStyle
    DoubleCut
    Offset
    HollowBody
    VStyle
    SmallBody
    Orchestral
    GrandAuditorium
    Dreadnought
    Jumbo
    Explorer
    SingleCut
    Combo
    Head
    Cabinet
    Special
}

model Customer {
    Id           Int     @id
    first_name   String
    last_name    String
    email        String
    phone_number String
    avatar       String
    address      Address @relation(fields: [addressId], references: [id])
    /// @zod.optional()
    LoyaltyLevel Int     @default(0)
    addressId    String
    Order        Order[]
}

model Address {
    id             String     @id @default(cuid())
    city           String
    street_name    String
    street_address String
    zip_code       String
    country        String
    lat            Float
    lon            Float
    Customer       Customer[]
    Order          Order[]
}

model Order {
    Id              Int         @id
    Customer        Customer    @relation(fields: [CustomerId], references: [Id])
    ShippingAddress Address     @relation(fields: [addressId], references: [id])
    Products        Product[]
    /// @zod.custom(z.coerce.date())
    DateCreated     DateTime
    OrderTotal      Float
    /// @zod.custom(imports.OrderStatusSchema)
    OrderStatus     OrderStatus

    addressId  String
    CustomerId Int
}

model Product {
    SKU_ID        String   @id
    ASN           String
    Category      String
    Online        Boolean
    ItemName      String
    Title         String
    BrandName     String
    Description   String?
    ProductDetail String?
    SalesPrice    Float
    PictureMain   String
    QtyInStock    Int
    QtyOnOrder    Int
    /// @zod.custom(imports.ColourSchema)
    Colour        Colour
    /// @zod.custom(imports.PickupSchema)
    Pickup        Pickup
    /// @zod.custom(imports.ShapeSchema)
    BodyShape     Shape
    /// @zod.custom(z.coerce.date())
    CreatedOn     DateTime
    Orders        Order[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
