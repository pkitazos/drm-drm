// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum OrderStatus {
    Placed
    Dispatched
    Delivering
    Delivered
    Completed
    Cancelled
}

enum Pickup {
    ElectroAcoustic
    SS
    SSS
    HH
    HHH
    HS
    HSS
    HSH
    P90
    S
    H
}

enum Colour {
    Red
    Orange
    Yellow
    Green
    Blue
    Purple
    Pink
    Brown
    Gold
    Silver
    Grey
    Black
    White
    Natural
    Multicolour
}

enum Shape {
    SStyle
    TStyle
    DoubleCut
    Offset
    HollowBody
    VStyle
    SmallBody
    Orchestral
    GrandAuditorium
    Dreadnought
    Jumbo
    Explorer
    SingleCut
    Combo
    Head
    Cabinet
}

model Customer {
    id            Int     @id @default(autoincrement())
    first_name    String
    last_name     String
    email         String
    phone_number  String
    avatar        String
    address       Address @relation(fields: [addressId], references: [id])
    loyalty_level Int
    addressId     String
    Order         Order[]
}

model Address {
    id             String     @id @default(cuid())
    city           String
    street_name    String
    street_address String
    zip_code       String
    country        String
    Customer       Customer[]
    Order          Order[]
}

model Order {
    id               Int         @id
    customer         Customer    @relation(fields: [customerId], references: [id])
    shipping_address Address     @relation(fields: [addressId], references: [id])
    products         Product[]
    date_created     DateTime
    order_total      Float
    order_status     OrderStatus
    customerId       Int
    addressId        String
}

model Product {
    sku_id         String   @id
    asn            String
    category       String
    online         Boolean
    item_name      String
    title          String
    brand_name     String
    description    String
    product_detail String
    sales_price    Float
    picture_main   String
    qty_in_stock   Int
    qty_on_order   Int
    colour         Colour
    pickup         Pickup
    shape          Shape
    create_on      DateTime
    Order          Order?   @relation(fields: [orderId], references: [id])
    orderId        Int?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
